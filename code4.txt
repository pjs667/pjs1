#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;

    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

Node* insert(Node* root, int val) {
    if (!root) return new Node(val);
    if (val < root->data)
        root->left = insert(root->left, val);
    else
        root->right = insert(root->right, val);
    return root;
}

int longestPath(Node* root) {
    if (!root) return 0;
    int leftDepth = longestPath(root->left);
    int rightDepth = longestPath(root->right);
    return max(leftDepth, rightDepth) + 1;
}

int findMin(Node* root) {
    if (!root) return -1;
    while (root->left)
        root = root->left;
    return root->data;
}

void swapTree(Node* root) {
    if (!root) return;
    swap(root->left, root->right);
    swapTree(root->left);
    swapTree(root->right);
}

bool search(Node* root, int key) {
    while (root) {
        if (root->data == key) return true;
        else if (key < root->data) root = root->left;
        else root = root->right;
    }
    return false;
}

void inorder(Node* root) {
    if (!root) return;
    inorder(root->left);
    cout << root->data << " ";
    inorder(root->right);
}

int main() {
    Node* root = nullptr;
    int n, value, searchKey;

    cout << "Enter number of values for BST: ";
    cin >> n;

    cout << "Enter " << n << " values: ";
    for (int i = 0; i < n; i++) {
        cin >> value;
        root = insert(root, value);
    }

    cout << "\nBST in-order traversal (Sorted): ";
    inorder(root);
    cout << endl;

    cout << "Number of nodes in longest path from root: " << longestPath(root) << endl;
    cout << "Minimum value in BST: " << findMin(root) << endl;

    swapTree(root);
    cout << "BST after swapping left and right pointers:\n";
    inorder(root);
    cout << endl;

    cout << "Enter value to search: ";
    cin >> searchKey;
    if (search(root, searchKey))
        cout << searchKey << " found in BST.\n";
    else
        cout << searchKey << " not found in BST.\n";

    return 0;
}
